#! /usr/bin/env node

var app = require('commander');
var fs = require('fs');
var Logger = require('../lib/logger');
var path = require('path');
var chalk = require('chalk');
var exec = require('child_process').exec;
var initPackage = require('init-package-json');
var mkdirp = require('mkdirp');
var loadState = require('../lib/load-state');

app.option('-d --debug', 'Set the log level to debug');
app.option('-c --chdir <dir>', 'Change the current working directory');
app.parse(process.argv);

// Set the root dir
if (app.chdir) {
	process.chdir(app.chdir);
}

// Setup logger
var logger = Logger(app);
var cwd = process.cwd();
logger.debug('cwd: ' + cwd);

// Load the state
loadState(cwd, function (err, state) {
	if (err) {
		// Suppress this error here because the state file shouldnt exist
	}

	fs.exists('./package.json', function (exists) {
		if (!exists) {
			logger.notice('No package.json, running npm init');
			initPackage(cwd, path.resolve(process.env.HOME, '.npm-init'), {}, function (err, data) {
				if (err) {
					logger.error(err);
				}
				createMokrStuff(state);
			});
			return;
		}
		createMokrStuff(state);
	});
});

function createMokrStuff (state) {
	logger.notice('Installing faker');
	exec('npm install --save faker', {
		cwd: cwd
	}, function (err, stdout, stderr) {
		if (err) {
			logger.notice(stdout);
			logger.error(err);
		}

		logger.notice(chalk.white('Creating ./mokr'));
		mkdirp('./mokr', function (err) {
			if (err) {
				return logger.error(err);
			}

			logger.notice(chalk.white('Creating ./mokr/data'));
			mkdirp('./mokr/data', function (err) {
				if (err) {
					return logger.error(err);
				}

				logger.notice(chalk.white('Creating ./mokr/fixtures'));
				mkdirp('./mokr/fixtures', function (err) {
					if (err) {
						return logger.error(err);
					}
					// Save state
					state.save(function (err) {
						if (err) {
							return logger.error(err);
						}
						logger.notice('Mokr is ready to go!');
						logger.notice('Now run `mokr create <name>` to strea a fixture.');
					});
				});
			});
		});
	});
}
