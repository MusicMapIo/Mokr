#! /usr/bin/env node

var app = require('commander');
var Logger = require('../lib/logger');
var path = require('path');
var loadState = require('../lib/load-state');
var each = require('each-async');

app.option('-d --debug', 'Set the log level to debug');
app.option('-c --chdir <dir>', 'Change the current working directory');
app.option('-f --force', 'Force run the fixture');
app.parse(process.argv);

// Set the root dir
if (app.chdir) {
	process.chdir(app.chdir);
}

// Setup logger
var logger = Logger(app);
var cwd = process.cwd();
logger.debug('cwd: ' + cwd);
logger.debug('force: ' + !!app.force);

// Load the state
loadState(cwd, function (err, state) {
	if (err) {
		return logger.error(err);
	}

	logger.debug('fixtures: ', app.args);
	each(app.args, function (name, i, done) {
		if (!state.fixtures[name]) {
			logger.error('No such fixture: ' + name);
			return done();
		}

		if (state.fixtures[name].hasRun && !app.force) {
			logger.warning('Cowardly refusing to re-run ' + name + '. Use --force to override.');
			return done();
		}

		// Run up
		state.runUp(name, function (err) {
			if (err) {
				logger.error('Fixture failed!');
				if (err instanceof Array) {
					return err.forEach(function (e) {
						logger.error(e);
					});
				} else {
					return logger.error(err);
				}
			}
			done();
		});
	}, function (err) {
		// Save no matter what
		logger.debug('saving state');
		state.save(function () {
			logger.debug('state saved');
			// Log error
			if (err) {
				logger.error(err);
				process.exit(1);
			}
		});
	});
});
