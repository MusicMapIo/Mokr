#! /usr/bin/env node

var app = require('commander');
var Logger = require('../lib/logger');
var paths = require('../lib/paths');
var State = require('../lib/state');
var loadState = require('../lib/load-state');
var saveState = require('../lib/save-state');
var runUp = require('../lib/run-up');
var each = require('each-async');

app.option('-d --debug', 'Set the log level to debug');
app.option('-c --chdir <dir>', 'Change the current working directory');
app.option('-f --force', 'Force run the fixture');
app.parse(process.argv);

// Set the root dir
if (app.chdir) {
	process.chdir(app.chdir);
}

// Setup logger
var logger = Logger(app);
var cwd = process.cwd();
logger.debug('cwd: ' + cwd);
logger.debug('force: ' + !!app.force);

var mokrPaths = paths(cwd);

var state = new State();
loadState(state, mokrPaths.stateFile, function (err) {
	if (err) {
		return logger.error(err);
	}
	each(app.args, function (name, i, done) {
		if (!state.fixtures[name]) {
			return logger.error('No such fixture: ' + name);
		}

		if (state.fixtures[name].hasRun && !app.force) {
			return logger.warning('Cowardly refusing to re-run ' + name + '. Use --force to override.');
		}

		// Run up
		runUp(state, name, function (err) {
			if (err) {
				logger.error('Fixture failed to run');
				if (err instanceof Array) {
					return err.forEach(function (e) {
						logger.error(e);
					});
				} else {
					return logger.error(err);
				}
			}
			done();
		});
	}, function (err) {
		if (err) {
			// Ignore errors, already logged
		}

		// Save no matter what
		saveState(state, mokrPaths.stateFile, function (err) {
			if (err) {
				return logger.error(err);
			}
			logger.notice('Fixture successfully run!');
		});
	});
});
